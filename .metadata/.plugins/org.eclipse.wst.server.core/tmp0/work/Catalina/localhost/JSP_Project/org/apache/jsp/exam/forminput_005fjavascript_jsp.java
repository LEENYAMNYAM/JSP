/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-02-27 06:50:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.exam;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class forminput_005fjavascript_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>FORM EXAM</title>\r\n");
      out.write("<script>\r\n");
      out.write("function check(){\r\n");
      out.write("	//이름, 나이가 비어 있는 지 확인해서 비어있지 않으면 server로 전송\r\n");
      out.write("	if(document.getElementById(\"name\").value==\"\"){\r\n");
      out.write("		alert(\"이름 입력\")\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	if(document.getElementById(\"age\").value==\"\"){\r\n");
      out.write("		alert(\"나이 입력\")\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//관심분야 선택을 안하면 선택메세지 alert\r\n");
      out.write("	\r\n");
      out.write("	var chk_ob = document.getElementsByName(\"hobby\");\r\n");
      out.write("	var chk_flag = false;		//false 이면 취미가 하나도 선택안됨.\r\n");
      out.write("\r\n");
      out.write("	//for문 사용\r\n");
      out.write("	/* 	for (i=0; i<chk_ob.length; i++){\r\n");
      out.write("		if(chk_ob[i].checked){\r\n");
      out.write("			chk_flag=true;  	//true 이면 취미가 1개이상 선택됨.\r\n");
      out.write("		}\r\n");
      out.write("	} */\r\n");
      out.write("	//for-each문 사용\r\n");
      out.write("	chk_ob.forEach(f=>{\r\n");
      out.write("		if(f.checked){\r\n");
      out.write("			chk_flag=true\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	if(!chk_flag){\r\n");
      out.write("		alert(\"관심분야 선택\")\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	document.getElementById(\"frm\").submit();\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<form action=\"formResult.jsp\" method=\"get\" id=\"frm\">\r\n");
      out.write("이름 : <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"짱구\"></br>\r\n");
      out.write("나이 : <input type=\"number\" id=\"age\" name=\"age\"></br>\r\n");
      out.write("성별 : <label for=\"m\">남자</label> \r\n");
      out.write("	  <input type=\"radio\" name=\"gender\" id=\"m\" value=\"남자\" checked> \r\n");
      out.write("	  <label for=\"w\">여자</label> \r\n");
      out.write("	  <input type=\"radio\" name=\"gender\" id=\"w\" value=\"여자\" ></br>\r\n");
      out.write("관심분야 : <label for=\"h1\">운동</label> \r\n");
      out.write("		 <input type=\"checkbox\" name=\"hobby\" id=\"h1\" value=\"운동\"> \r\n");
      out.write("		 <label for=\"h2\">게임</label>\r\n");
      out.write("		 <input type=\"checkbox\" name=\"hobby\" id=\"h2\" value=\"게임\"> \r\n");
      out.write("		 <label for=\"h3\">등산</label>\r\n");
      out.write("		 <input type=\"checkbox\" name=\"hobby\" id=\"h3\" value=\"등산\"> \r\n");
      out.write("		 <label for=\"h4\">영화</label>\r\n");
      out.write("		 <input type=\"checkbox\" name=\"hobby\" id=\"h4\" value=\"영화\"></br>\r\n");
      out.write("직업 : <select name=\"job\" id=\"job\">\r\n");
      out.write("	  	<option>학생</option>    <!-- value 지정안하면 입력한 값이 전달됨. -->\r\n");
      out.write("	  	<option value=\"공무원\">공무원</option>\r\n");
      out.write("	  	<option value=\"회사원\">회사원</option>\r\n");
      out.write("	  	<option value=\"기타\">기타</option>\r\n");
      out.write("	  </select> </br>\r\n");
      out.write("	  \r\n");
      out.write("<input type=\"button\" value=\"버튼전송\" onclick=\"check()\"/>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
